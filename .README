# Patching Bot Application

A full-stack Python application for monitoring Windows updates across multiple servers, designed to replace the n8n workflow with a self-contained solution.

## Features

- **File Monitoring**: Automatically detects and processes CSV files containing server machine names
- **Azure Integration**: Connects to Azure Automation to run update status check runbooks
- **Update Analysis**: Parses and aggregates Windows update results from multiple servers
- **AI-Powered Reporting**: Generates concise reports with OpenAI or Ollama
- **Email Notifications**: Sends summary reports via email
- **Web Dashboard**: Provides a web interface for monitoring and manual processing

## Setup

### Prerequisites

- Python 3.8+
- Azure Automation Account with a configured runbook
- SMTP server for email notifications
- OpenAI API key or Ollama setup (optional, for AI-powered reports)

### Installation

1. Clone the repository:
   ```
   git clone https://github.com/yourusername/patching-bot.git
   cd patching-bot
   ```

2. Install dependencies:
   ```
   pip install -r requirements.txt
   ```

3. Configure the application:
   - Edit `config.py` with your specific settings
   - Create necessary directories:
     ```
     mkdir -p uploads
     ```

4. Create templates directory and add the template file:
   ```
   mkdir -p templates
   # Copy the index.html file to the templates directory
   ```

### Docker Installation

Alternatively, you can use Docker for easy deployment:

1. Build the Docker image:
   ```
   docker build -t patching-bot .
   ```

2. Run the container:
   ```
   docker run -d -p 5000:5000 -v /path/to/watch/directory:/data/shared/patching --name patching-bot patching-bot
   ```

## Usage

### Web Interface

1. Start the application:
   ```
   python app.py
   ```

2. Open a web browser and navigate to:
   ```
   http://localhost:5000
   ```

3. Use the web interface to:
   - Start/stop file monitoring
   - Upload CSV files manually
   - View active and completed jobs
   - Review update status for each server

### File Monitoring

The application can monitor a specified directory for new CSV files. When a CSV file is detected, it:

1. Extracts machine names from the file
2. Runs an Azure Automation runbook for each machine
3. Polls for job completion
4. Parses the update results
5. Generates a summary report
6. Sends an email notification

### CSV Format

The CSV file should contain a column with server machine names. The column should be named "Machine Name" or a similar variation. Example:

```
Machine Name,Location,Department
PGHXALAND02,Pittsburgh,Accounting
NYCDATA01,New York,IT
```

## Configuration

Edit `config.py` to customize the application:

- **File Monitoring**: Set the watch directory and auto-start options
- **Azure**: Configure subscription, resource group, and authentication
- **AI Integration**: Choose between OpenAI or Ollama for report generation
- **Email**: Set up SMTP server details and recipient information

## Project Structure

- `app.py`: Main application file
- `config.py`: Configuration settings
- `templates/`: HTML templates for the web interface
- `uploads/`: Directory for manually uploaded CSV files

## Troubleshooting

Check the `patching_bot.log` file for detailed logs and error messages.

Common issues:
- **File Monitoring Not Working**: Ensure the watch directory exists and has proper permissions
- **Azure Authentication Failed**: Verify your client ID, client secret, and tenant ID
- **Email Sending Failed**: Check SMTP server settings and credentials
- **AI Integration Not Working**: Verify API keys and connection settings

## License

This project is licensed under the MIT License - see the LICENSE file for details.